loki:
  test_pod:
    enabled: true
    image: bats/bats:1.8.2
    pullPolicy: IfNotPresent
  loki:
    enabled: true
    isDefault: false
    url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    datasource:
      jsonData: "{}"
      uid: ""
    serviceAnnotations: 
      cloud.google.com/neg: '{"ingress":true}'
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: 'filesystem'
    # https://stackoverflow.com/questions/74205547/promtail-loki-only-shows-some-namespaces-not-all
    monitoring:
      dashboards:
        enabled: false
      selfMonitoring:
        enabled: true
        grafanaAgent:
          installOperator: false
        lokiCanary:
          enabled: false
    singleBinary:
      replicas: 1

  promtail:
    enabled: true
    config:
      logLevel: info
      serverPort: 3101
      clients:
        - url: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push

  fluent-bit:
    enabled: false

  grafana:
    enabled: false
    sidecar:
      datasources:
        label: ""
        labelValue: ""
        enabled: true
        maxLines: 1000
    image:
      tag: 8.3.5

  prometheus:
    enabled: false
    isDefault: false
    url: http://{{ include "prometheus.fullname" .}}:{{ .Values.prometheus.server.service.servicePort }}{{ .Values.prometheus.server.prefixURL }}
    datasource:
      jsonData: "{}"

  filebeat:
    enabled: false
    filebeatConfig:
      filebeat.yml: |
        # logging.level: debug
        filebeat.inputs:
        - type: container
          paths:
            - /var/log/containers/*.log
          processors:
          - add_kubernetes_metadata:
              host: ${NODE_NAME}
              matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"
        output.logstash:
          hosts: ["logstash-loki:5044"]

  logstash:
    enabled: false
    image: grafana/logstash-output-loki
    imageTag: 1.0.1
    filters:
      main: |-
        filter {
          if [kubernetes] {
            mutate {
              add_field => {
                "container_name" => "%{[kubernetes][container][name]}"
                "namespace" => "%{[kubernetes][namespace]}"
                "pod" => "%{[kubernetes][pod][name]}"
              }
              replace => { "host" => "%{[kubernetes][node][name]}"}
            }
          }
          mutate {
            remove_field => ["tags"]
          }
        }
    outputs:
      main: |-
        output {
          loki {
            url => "http://loki:3100/loki/api/v1/push"
            #username => "test"
            #password => "test"
          }
          # stdout { codec => rubydebug }
        }

  # proxy is currently only used by loki test pod
  # Note: If http_proxy/https_proxy are set, then no_proxy should include the
  # loki service name, so that tests are able to communicate with the loki
  # service.
  proxy:
    http_proxy: ""
    https_proxy: ""
    no_proxy: ""


  # minio:
  #   enabled: false

# tempo:

kube-prometheus-stack:
  hostRootFsMount:
    enabled: false
  grafana:
    enabled: true
    # grafana.ini:
    #   server:
    #     domain: grafana.dev.nvcrgroup.com
    #     root_url: https://grafana.dev.nvcrgroup.com
    #   auth.generic_oauth:
    #     enabled: true
    #     name : Keycloak-Novelcore
    #     role_attribute_path: contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
    #     auth_url: https://keycloak.dev.nvcrgroup.com/auth/realms/core-platform/protocol/openid-connect/auth
    #     token_url: https://keycloak.dev.nvcrgroup.com/auth/realms/core-platform/protocol/openid-connect/token
    #     api_url: https://keycloak.dev.nvcrgroup.com/auth/realms/core-platform/protocol/openid-connect/userinfo
    #     scopes: openid profile email
    #     # email_attribute_path: email
    #     # login_attribute_path: username
    #     # name_attribute_path: full_name
    #     client_id: grafana-oauth
    #     client_secret: LNMJazZSonYvHl1vD2cnw5Fw7nyyCEYd
        # allow_sign_up: false
    # forceDeployDatasources: true
    # ingress:
    #   enabled: true
    #   # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    #   # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    #   ingressClassName: traefik
    #   annotations: 
    #     cert-manager.io/cluster-issuer: "traefik-production-issuer"
    #   labels: {}
    #   path: /
    #   pathType: Prefix
    #   hosts:
    #     - grafana.dev.nvcrgroup.com
    #   extraPaths: []
    #   tls: 
    #     - hosts:
    #       - grafana.dev.nvcrgroup.com
    #       secretName: grafana-tls
  prometheus:
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false