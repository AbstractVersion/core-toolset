neo4j:
  ## @param nameOverride String to partially override common.names.fullname
  # nameOverride: "neo4j"
  ## @param fullnameOverride String to fully override common.names.fullname
  # fullnameOverride: "neo4j"
  # serviceMonitor:
  #   enabled: true
  #   labels: {}
  #   jobLabel: "neo4j"
  #   interval: "10s"
  #   port: "tcp-prometheus"
  #   path: "/"
  #   namespaceSelector: {}
  # #    any: false
  # #    matchNames:
  # #      - default
  #   targetLabels: []
  # #    - "demo"
  # #    - "value"
  #   selector: 
  #     matchLabels:
  #       helm.neo4j.com/service: "admin"
  # https://neo4j.com/docs/operations-manual/current/kubernetes/monitoring/
  # config:
  #   server.metrics.prometheus.enabled: "true"
  #   server.metrics.prometheus.endpoint: "0.0.0.0:2004"
  #   server.metrics.jmx.enabled: "true"
  # Neo4j Configuration (yaml format)
  config:
    server.config.strict_validation.enabled: "false"
    server.directories.plugins: "/var/lib/neo4j/labs"
    dbms.security.procedures.allowlist: "apoc.math.maxInteger,apoc.cypher.doIt,apoc.meta.data"
    dbms.security.procedures.unrestricted: "algo.*,apoc.*"
  neo4j:
    # Name of your cluster
    name: "neo4j"
    password: "Novelc0r3dxxx"
    # Neo4j Edition to use (community|enterprise)
    edition: "community"
    # Set acceptLicenseAgreement: "yes" to confirm that you have a Neo4j license agreement.
    acceptLicenseAgreement: "no"
    resources:
      requests:
        cpu: "1000m"
        memory: "2Gi"
      limits:
        cpu: "2000m"
        memory: "4Gi"
  apoc_config:
    apoc.trigger.enabled: "true"
    apoc.export.file.enabled: "true"
    apoc.import.file.enabled: "true"
    apoc.import.file.use__neo4j__config: "true"
  env:
    NEO4J_PLUGINS: '["apoc"]'
    NEO4J_apoc_import_file_use__neo4j__config: 'true'
  # Volumes for Neo4j
  # Volumes for Neo4j
  volumes:
    data:

      #labels for data pvc on creation (Valid only when mode set to selector | defaultStorageClass | dynamic | volumeClaimTemplate)
      labels:
        data: "true"
      # Set it to true when you do not want to use the subPathExpr
      disableSubPathExpr: false

      # REQUIRED: specify a volume mode to use for data
      # Valid values are share|selector|defaultStorageClass|volume|volumeClaimTemplate|dynamic
      # To get up-and-running quickly, for development or testing, use "defaultStorageClass" for a dynamically provisioned volume of the default storage class.
      mode: "defaultStorageClass"
      defaultStorageClass:
        requests:
          storage: 150Gi
          # Only used if mode is set to "selector"
          # Will attach to existing volumes that match the selector
          # selector:
          #   storageClassName: "default"
          #   accessModes:
          #   - ReadWriteOnce
          #   requests:
          #     storage: 250Gi
          #   # A helm template to generate a label selector to match existing volumes n.b. both storageClassName and label selector must match existing volumes
          #   selectorTemplate:
          #     matchLabels:
          #       app: "{{ .Values.neo4j.name }}"
          #       helm.neo4j.com/volume-role: "data"
  # Services for Neo4j
  services:
    # A ClusterIP service with the same name as the Helm Release name should be used for Neo4j Driver connections originating inside the
    # Kubernetes cluster.
    default:
      # Annotations for the K8s Service object
      annotations: {}
    # A LoadBalancer Service for external Neo4j driver applications and Neo4j Browser
    neo4j:
      enabled: true
      # Annotations for the K8s Service object
      annotations: {}
      spec:
        # Type of service.
        type: ClusterIP